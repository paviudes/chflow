import os

def CheckDependencies():
	# Check if all the requires packages exist
	# if not, create a requirements text file.
	packages = [["scipy", "0.18", "linear algebra"],
				["numpy", "0.12", "matrix operations"],
				["picos", "1.0", "semi-definite programs, eg. Diamond norm"],
				["cvxopt", "1.0", "semi-definite programs, eg. Diamond norm"],
				["multiprocessing", "1.0", "parallel computations"],
				["sklearn", "1.0", "machine learning"],
				["matplotlib", "1.0", "plotting"]]
	missing = []
	for i in range(len(packages)):
		try:
			exec("import %s" % (packages[i][0]))
		except:
			missing.append(packages[i])
	if (len(missing) > 0):
		print("\033[2mMissing or outdated packages might affect certain functionalities.\033[2m")
		print("\033[2m{:<20} | {:<10} | {:<20}\033[0m".format("Package", "Version", "Affected functionality"))
		print("\033[2m{:<50}\033[0m".format("--------------------------------------------------------------"))
		for i in range(len(missing)):
			print("\033[2m{:<20} | {:<10} | {:<20}\033[0m".format(missing[i][0], missing[i][1], missing[i][2]))
		print("\033[2mxxxxxx\033[0m")
		with open("./../requirements.txt", "w") as fp:
			fp.write("# Install the missing packages using pip install -r requirements.txt\n")
			for i in range(len(missing)):
				fp.write("%s>=%s\n" % (missing[i][0], missing[i][1]))
		print("\033[2mTo install all missing packages, run \"pip install -r requirements.txt\".\033[0m")
	return None


def BuildExt(loc, cython, compiler = "gcc"):
	# build all the cython (or c) extensions for simulations.
	# These are in src/simulate
	from distutils.core import setup
	from distutils.extension import Extension
	files = [os.path.split(name)[1].split(".")[0] for name in os.listdir("src/%s" % (loc)) if (os.path.splitext(name)[1] == "pyx")]
	if (cython == 1):
		from Cython.Build import cythonize
		from Cython.Distutils.build_ext import build_ext
		ext = "pyx"
	else:
		from distutils.command.build_ext import build_ext
		ext = "c"
	build_ext.inplace = 1
	os.environ["CC"]=compiler
	if (compiler == "gcc"):
		os.environ["CFLAGS"] = "-lm -O3 -Wall -ffast-math -march=native -mfpmath=sse -fno-signed-zeros"
	for i in range(len(files)):
		extensions.append(Extension("src/%s.%s.%s" % (loc, files[i], ext), ["src/%s/%s.%s" (loc, files[i], ext)], include_dirs = [np.get_include()], extra_compile_args=['-fopenmp'], extra_link_args=['-fopenmp'], language = 'c'))
	if (cython == 1):
		extensions = cythonize(extensions)
	setup(
		name=loc,
		version="1.0",
		description="Compiled tools for %s" % (loc),
		ext_modules=extensions,
		cmdclass={'build_ext':build_ext}
	)
	return None


def Clean(dist = 0):
	# Clean up all the files that are associated with compilation and execution.
	# Remove the files generated by the Cython compiler -- *.c and *.so and build/ directory in the simulate/ folder.
	if (not (os.path.exists("./../.ignore/"))):
		os.mkdir("./../.ignore/")
	# Remove all latex generated files from docs/ and compiler directives from simulate/ and analyze/
	os.system("find ./../ -maxdepth 3 \( -name \"*.out\" -o -name \"*.aux\" -o -name \"*.log\" -o -name \"*.fls\" -o -name \"*.bbl\" -o -name \"*.synctex.gz\" -o -name \"*.pyc\" -o -name \"*.so\" \) -type f -exec mv \'{}\' ./../.ignore/ \\; > /dev/null 2>&1")
	# os.system("mv simulate/build/ ./../.ignore/simulate_build > /dev/null 2>&1")
	# os.system("mv analyze/build/ ./../.ignore/analyze_build > /dev/null 2>&1")
	# Remove all backup files -- files ending with ~
	os.system("find ./../ -maxdepth 3 -name \"*~\" -type f -exec mv \'{}\' ./../.ignore/ \\; > /dev/null 2>&1")
	# remove compiler logs
	os.system("mv simulate/compiler_output.txt ./../.ignore/simulate_compiler.txt > /dev/null 2>&1")
	os.system("mv analyze/compiler_output.txt ./../.ignore/analyze_compiler.txt > /dev/null 2>&1")
	if (dist == 1):
		# Remove all c extension files
		os.system("find simulate/ -name \'*.c\' -type f -exec mv \'{}\' ./../.ignore/ \\; > /dev/null 2>&1")
		os.system("find analyze/ -name \'*.c\' -type f -exec mv \'{}\' ./../.ignore/ \\; > /dev/null 2>&1")
		# Remove all input files except for the template one.
		os.system("find ./../input ! -name \'sample_*.txt\' -type f -exec mv \'{}\' ./../.ignore/ \\; > /dev/null 2>&1")
		# Remove all physical channels
		os.system("mv ./../physical/*.npy ./../.ignore/ > /dev/null 2>&1")
	return None
